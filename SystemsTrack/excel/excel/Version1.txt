// excel.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <stdlib.h>

#define SHEET_SIZE 10
double **createSheet(){
	double **sheet;
	sheet = (double **)malloc(sizeof(double *)*SHEET_SIZE);
	for (int iter = 0; iter < SHEET_SIZE; iter++)
		sheet[iter] = (double *)malloc(sizeof(double)*SHEET_SIZE);
	for (int row = 0; row < SHEET_SIZE; row++)
		for (int col=0; col < SHEET_SIZE; col++)
			sheet[row][col] = 0;
	return sheet;
}

char *toUpper(char *a){
	for (int iter = 0; a[iter]; iter++){
		if (a[iter] >= 'a'&&a[iter] <= 'z'){
			a[iter] = a[iter] - 32;
		}
	}
	return a;
}

int strLength(char *a){
	int iter;
	for (iter = 0; a[iter]; iter++);
	return iter;
}

int strCompare(char *a, char *b){
	if (strLength(a) != strLength(b))
		return 0;
	for (int iter = 0; a[iter] && b[iter]; iter++){
		if (a[iter] != b[iter])
			return 0;
	}
	return 1;
}


int getOperation(char *token){
	if (strCompare(toUpper(token), "GET\0"))
		return 1;
	if (strCompare(toUpper(token), "SET\0"))
		return 2;
	if (strCompare(toUpper(token), "PRINT\0"))
		return 3;
	if (strCompare(toUpper(token), "IMPORT\0"))
		return 4;
	if (strCompare(toUpper(token), "EXPORT\0"))
		return 5;
	return -1;
}

int getCol(char ch){
	if (ch >= 'a'&&ch <= 'z')
		return ch - 'a';
	return ch - 'A';
}

int getRow(char ch){
	return ch - '1';
}

void GET(double **sheet, int iter, char *cmd){
	int iter1;
	int row, col;
	for (iter1 = iter; cmd[iter1]; iter1++){
		if (cmd[iter1] == ' ')
			continue;
		else
			col = getCol(cmd[iter1]);
		break;
	}
	if (cmd[iter1 + 2] != '0')
		row = getRow(cmd[iter1+1]);
	else
		row = 9;
	int val = sheet[row][col];
	printf("%d\n", val);

}

void SET(double **sheet, int iter, char *cmd){
	int iter1;
	int row, col;
	for (iter1 = iter; cmd[iter1]; iter1++){
		if (cmd[iter1] == ' ')
			continue;
		else
			col = getCol(cmd[iter1]);
		break;
	}
	if (cmd[iter1 + 2] != '0')
		row = getRow(cmd[iter1 + 1]);
	else
		row = 9;
	if (row == 9){
		iter1 = iter1 + 4;
	}
	else
		iter1 = iter1 + 3;
	int val = 0;
	for (; cmd[iter1]; iter1++){
		val = (val * 10) + (getRow(cmd[iter1]) + 1);
	}
	sheet[row][col] = val;
		
}

void PRINT(double **sheet){
	printf("\t\t\t***Sheet***\n");
	printf("\n+");
	for (int line = 1; line < SHEET_SIZE * 6 + 6; line++){
			printf("-");
	}
	printf("+\n|");
	printf("%*c|", 5, ' ');
	for (int col = 0; col < SHEET_SIZE; col++){
		printf("%*c|", 5, 'A'+col);
	}
	printf("\n|");
	for (int line = 1; line < SHEET_SIZE * 6 + 6; line++){
		if (line % 6 == 0)
			printf("+");
		else
			printf("-");
	}
	printf("|\n");
	for (int row = 0; row < SHEET_SIZE; row++){
		printf("|");
		printf("%*d|", 5, row+1);
		for (int col = 0; col < SHEET_SIZE; col++){
			int val = sheet[row][col];
			printf("%*d|", 5, val);
		}
		if (row != SHEET_SIZE - 1)
			printf("\n|");
		else
			printf("\n+");
		for (int line = 1; line < SHEET_SIZE * 6 + 6; line++){
			if (line % 6 == 0 && row!=SHEET_SIZE-1)
				printf("+");
			else
				printf("-");
		}
		if (row != SHEET_SIZE - 1)
			printf("|\n");
		else
			printf("+\n");
	}
}

void IMPORT(double **sheet, int iter, char *cmd){
	char *fle;
	fle = (char *)malloc(20);
	int fileIndex = 0;
	int extension = 0;
	for (int iter1 = iter; cmd[iter1]; iter1++){
		if (cmd[iter1] == ' ')
			continue;
		fle[fileIndex++] = cmd[iter1];
		if (cmd[iter1] == '.')
			extension = 1;
	}
	if (extension == 0){
		fle[fileIndex++] = '.';
		fle[fileIndex++] = 'c';
		fle[fileIndex++] = 's';
		fle[fileIndex++] = 'v';
	}
	char ch;
	fle[fileIndex] = '\0';
	FILE *fptr;
	fptr = fopen(fle, "r");
	for (int row = 0; row < SHEET_SIZE; row++){
		for (int col = 0; col < SHEET_SIZE; col++){
			int val;
			fscanf(fptr, "%d", &val);
			sheet[row][col] = val;
			if (col != SHEET_SIZE - 1)
				fscanf(fptr, "%c", &ch);
		}
		fscanf(fptr, "%c",&ch);
	}
	fclose(fptr);
}

void EXPORT(double **sheet, int iter, char *cmd){
	char *fle;
	fle = (char *)malloc(20);
	int fileIndex = 0;
	int extension = 0;
	for (int iter1 = iter; cmd[iter1]; iter1++){
		if (cmd[iter1] == ' ')
			continue;
		fle[fileIndex++] = cmd[iter1];
		if (cmd[iter1] == '.')
			extension = 1;
	}
	if (extension == 0){
		fle[fileIndex++] = '.';
		fle[fileIndex++] = 'c';
		fle[fileIndex++] = 's';
		fle[fileIndex++] = 'v';
	}
	fle[fileIndex] = '\0';
	FILE *fptr;
	fptr = fopen(fle, "w");
	for (int row = 0; row < SHEET_SIZE; row++){
		for (int col = 0; col < SHEET_SIZE; col++){
			int val = sheet[row][col];
			fprintf(fptr, "%d", val);
			if (col != SHEET_SIZE - 1)
				fprintf(fptr, "%c", ',');
		}
		fprintf(fptr, "\n");
	}
	fclose(fptr);

}


void inputDecode(double **sheet, char *cmd){
	char *token = (char *)malloc(7);
	int tokenIndex = 0;
	int operation = -1;
	int iter;
	for (iter = 0; cmd[iter]; iter++){
		if (cmd[iter] == ' '){
			break;
		}
		token[tokenIndex++] = cmd[iter];
	}
	token[tokenIndex] = '\0';
	operation = getOperation(token);
	if (operation == 1)
		GET(sheet, iter, cmd);
	else if (operation == 2)
		SET(sheet, iter, cmd);
	else if (operation == 3)
		PRINT(sheet);
	else if (operation == 4)
		IMPORT(sheet, iter, cmd);
	else if (operation == 5)
		EXPORT(sheet, iter, cmd);
	else
		printf("Invalid command %s\n", token);

}


void userInterface(){

	double **sheet = createSheet();
	char *cmd = (char *)malloc(100);
 	while(1){
		printf("> ");
		gets(cmd);
		inputDecode(sheet, cmd);
	}

}

int _tmain(int argc, _TCHAR* argv[])
{
	userInterface();
	return 0;
}

/*for (int i = 0; i < SHEET_SIZE; i++){
		for (int j = 0; j < SHEET_SIZE; j++)
			printf("%d", sheet[i][j]);
		printf("\n");
		}*/